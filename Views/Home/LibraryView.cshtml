@{
    ViewData["Title"] = "Home Page";
}
<style>
    :root {
        --columns: 5;
        --entry-width: 184px;
        --entry-margin: 16px;
    }

    label {
        color: white;
    }

    #library-container {
        display: flex;
        padding: 0px;
        flex-wrap: wrap;
        list-style: none;
        width: calc((var(--columns) * var(--entry-width)) + (var(--columns) * var(--entry-margin) * 2) + 12px);
        overflow: auto;
        scrollbar-gutter: stable;
        scrollbar-width: thin;
        margin: 0 80px 0 80px;
        max-height: calc(100vh - 57px);
    }

    .entry-container {
        width: var(--entry-width);
        margin: var(--entry-margin);
    }

    .thumbnail-container {
        display: inline-flex;
        width: var(--entry-width);
        height: var(--entry-width);
    }

    .thumbnail {
        width: 100%;
        height: 100%;
        border-radius: 8px;
        background-color: var(--bg-colour-dark);
        overflow: hidden;
        object-fit: cover;
        object-position: center center;
        border-style: none;
        transition: opacity 0.2s;
    }

        .thumbnail:hover {
            opacity: 0.5;
        }

    .label-container{
        padding-left: 1px;
        overflow: hidden;
    }

    .label-container a {
        color: var(--text-colour);
        overflow: hidden;
        text-overflow: ellipsis;
        font-weight: bold;
        text-decoration: none;
        white-space: nowrap;
        display: block;
        transition: color 0.2s;
    }

        .label-container a:hover {
            color: white;
        }

    .filter-menu {
        position: fixed;
        right: 0;
        top: 57px;
        height: 100%;
        width: 20%;
        background-color: var(--bg-colour-dark);
    }

    #filter-menu-left {
        left: 0;
    }

    #filter-menu-right {
        right: 0;
    }
</style>

<div class="h-100 d-flex justify-content-center overflow-hidden">
    <ul id="library-container">
        <!-- Images get inserted here on DOMContentLoaded -->
    </ul>
</div>

<div id="filter-menu-left" class="filter-menu">
    <div class="panel-container"> 
        <h1 class="panel-title-text">Sorting and Filtering</h1>
    </div>

    <!-- Image Sorting -->
    <div class="panel-container d-inline-flex gap-1">
        <label for="sorting-mode"> Sort mode </label>
        <select name="sorting-mode" id="sorting-mode">
            <option value="alphabetical"> Alphabetical </option>
            <option value="date-created"> Creation date </option>
        </select>
    </div>

    <!--- Tag Filters -->
    <div class="panel-container d-inline-flex gap-1">
        <label for="filter-mode"> Display tags with </label>
        <select name="filter-mode" id="filter-mode">
            <option value="all"> all filter tags. </option>
            <option value="any"> any filter tags. </option>
        </select>
    </div>

    <div class="panel-container">
        <div class="container-fluid p-2 pt-0 overflow-hidden">
            <h1> Tag Filters </h1>
        </div>
        <div id="filter-container" class="tags-container container-fluid rounded bg-colour-darker p-2 gap-1">
            <div id="add-filter-button" class="tag-container bg-colour-light">
                <h1 class="tag-text">+</h1>
            </div>
        </div>
    </div>
</div>

<!-- 
<div id="filter-menu-right" class="filter-menu">
    
</div>
-->

<script>
    var tagFilters = [];
    var sortingMode = "alphabetical";
    var filterMode = "all"

    document.addEventListener('DOMContentLoaded', LoadImages);

    const filterContainer = document.getElementById('filter-container');
    const addFilterButton = document.getElementById('add-filter-button');
    const libraryContainer = document.getElementById('library-container');
    const selectSortingMode = document.getElementById('sorting-mode');
    const selectFilterMode = document.getElementById('filter-mode');

    
    addFilterButton.addEventListener('click', AddFilter);

    selectSortingMode.addEventListener('change', () => SetSortingMode(selectSortingMode.value));
    selectFilterMode.addEventListener('change', () => SetFilterMode(selectFilterMode.value));
    
    async function LoadImages() {
        try {
            libraryContainer.innerHTML = '';

            const query = new URLSearchParams();

            if(sortingMode != null) query.set('sortingMode', sortingMode);
            if(filterMode != null) query.set('filterMode', filterMode);
            if(tagFilters.length > 0) query.set('tagFilters', tagFilters.map(filter => filter.id).join(','));

            console.log(`/api/images?${query.toString()}`);

            const response = await fetch(`/api/images?${query.toString()}`);

            const images = await response.json();

            images.forEach(image => {
                const entryContainer = document.createElement('li');
                entryContainer.className = 'entry-container';

                entryContainer.innerHTML = `
                    <a class="thumbnail-container" href="/Home/ImageViewer?id=${image.id}">
                        <img src="${image.filePathName}" class="thumbnail" />
                    </a>
                    <div class="label-container">
                        <a asp-area="" href="/Home/ImageViewer?id=${image.id}">${image.fileName}</a>
                    </div>
                `;

                libraryContainer.appendChild(entryContainer);
            });
        }

        catch (error) {
            console.error('Error loading images:', error);
        }
    }
    async function AddFilter() {
        const name = prompt('Add filter with the following name:');

        if(name == null) {
            return;
        }

        const response = await fetch(`/api/tags/find?name=${name}`);

        var filter;

        if(response.status == 404) {
            const tryAgain = confirm(`The tag "${name}" does not currently exist.\nWould you like enter a different tag?`)

            if(tryAgain) {
                AddFilter();
            }

            return;
        }

        if (!response.ok) {
            return;
        }

        filter = await response.json();

        // Don't add the filter if it's already been added.
        const tagIndex = tagFilters.findIndex((t) => t.id == filter.id);

        if (tagIndex > -1) {
            return;
        }

        tagFilters.push(filter);
        DisplayFilter(filter);

        LoadImages();
    }
    async function RemoveFilter(filter, filterVisuals) {
        filterVisuals.remove();

        const filterIndex = tagFilters.indexOf(filter);

        if (filterIndex > -1) {
            tagFilters.splice(filterIndex, 1);
            LoadImages();
        }      
    }
    async function DisplayFilter(filter) {
        const newFilter = document.createElement('div');
        const filterText = document.createElement('h1');

        newFilter.className = 'tag-container';
        newFilter.style.backgroundColor = filter.colourHex;
        newFilter.oncontextmenu = () => { return false };

        filterText.className = 'tag-text';
        filterText.textContent = filter.tagName;

        newFilter.appendChild(filterText);
        filterContainer.insertBefore(newFilter, addFilterButton);

        newFilter.addEventListener('click', (filter) => FilterByTag(filter));
        newFilter.addEventListener('contextmenu', () => RemoveFilter(filter, newFilter));
    }
    async function SetSortingMode(mode) {
        console.log(mode);
        if(mode == sortingMode) return;

        sortingMode = mode;
        LoadImages();
    }
    async function SetFilterMode(mode) {
        if(mode == filterMode) return;

        filterMode = mode;
        LoadImages();
    }
</script>