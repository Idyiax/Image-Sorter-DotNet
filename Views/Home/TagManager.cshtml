<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="//cdn.jsdelivr.net/npm/force-graph"></script>

<style>
    h1 {
        font-size: 16px;
        margin-top: 0;
        margin-bottom: 0;
        overflow: hidden;
        word-wrap: break-word;
    }

    label {
        color: var(--text-colour);
    }

    .mode-selector {
        background-color: var(--bg-colour-main);
        border-color: var(--border-colour);
        border-width: 2px;
        border-style: solid;
    }

        .mode-selector :hover {
            background-color: var(--bg-colour-light);
            cursor: pointer;
        }

        .mode-selector p {
            color: white;
            font-size: 20px;
            font-weight: bolder;
            margin: 4px;
        }

    #edit-tag-name {
        min-width: 20px;
        min-height: 20px;
        border-radius: 10px;
        display: flex;
        background-color: var(--bg-colour-light);
        align-items: center;
        justify-content: center;
        transition: opacity 0.2s;
    }

        #edit-tag-name:hover {
            opacity: 0.5;
            cursor: pointer;
        }

    #tag-name {
        max-width: calc(100% - 24px);
    }
</style>

<div class="container w-100 h-100 mw-100 mh-100 p-0 d-inline-flex">
    
    <!-- Info Panel -->
    <div id="info-panel" class="side-panel" onclick="ignoreDeselect = true;">
        
        <!-- Info Panel Headers -->
        <div class="row">
            <div id="create-tag-button" class="mode-selector container-fluid col align-items-center justify-content-center" style="background-color: rgb(110, 110, 110);">
                <p class="text-white" style="text-align: center;"> Create </p>
            </div>
            <div id="edit-tag-button" class="mode-selector container-fluid col align-items-center justify-content-center">
                <p class="text-white" style="text-align: center;"> Edit </p>
            </div>
        </div>

        <!-- Info Section -->
        <div class="container-fluid h-100 p-0">

            <!-- Create Tag Menu -->
            <div id="create-tag-menu">
                <div class="d-flex align-items-center p-1 gap-1">
                    <form id="uploadForm">
                        <label for="name">Tag Name</label><br>
                        <input type="text" id="name" name="name"><br>
                        <label for="colourHex">Tag Colour</label><br>
                        <input type="color" id="colourHex" name="colourHex"><br>
                        <input type="submit" value="Submit">
                    </form>
                </div>
            </div>

            <!-- Edit Tag Menu -->
            <div id="edit-tag-menu" class="h-100" style="display: none">
                <div id="edit-tag-menu-container" class="h-100 align-items-center">

                    <!-- Tag Name Display/Edit -->
                    <div class="panel-container d-flex" style="align-items: last baseline">
                        <h1 id="tag-name" class="panel-title-text"> <!-- Tag Name Inserted Here--> </h1>
                        <div id="edit-tag-name">
                            <svg width="16px" height="16px" style="fill: white;">
                                <path d="M9.97401 3.19292C10.3645 2.80239 10.9977 2.80239 11.3882 3.19292L12.8024 4.60713C13.193 4.99766 13.193 5.63082 12.8024 6.02134L11.7418 7.082L8.91335 4.25358L9.97401 3.19292Z"></path>
                                <path d="M8.20624 4.96068L3.61005 9.55688L3.05003 12.357C2.98005 12.7068 3.28851 13.0153 3.63838 12.9453L6.43847 12.3853L11.0347 7.78911L8.20624 4.96068Z"></path>
                            </svg>
                        </div>
                    </div>

                    <!-- Parent Tag Management -->
                    <div class="panel-container">
                        <div class="container-fluid pb-2 ps-0 overflow-hidden">
                            <h1> Parent Tags </h1>
                        </div>
                        <div id="parent-tags-container" class="tags-container container-fluid rounded bg-colour-darker p-2 gap-1">
                            <div id="add-parent-button" class="add-tag-button tag-container bg-colour-light">
                                <h1 class="tag-text">+</h1>
                            </div>
                        </div>
                    </div>

                    <!-- Child Tag Management -->
                    <div class="panel-container">
                        <div class="container-fluid pb-2 ps-0 overflow-hidden">
                            <h1> Child Tags </h1>
                        </div>
                        <div id="child-tags-container" class="tags-container container-fluid rounded bg-colour-darker p-2 gap-1">
                            <div id="add-child-button" class="add-tag-button tag-container bg-colour-light">
                                <h1 class="tag-text">+</h1>
                            </div>
                        </div>
                    </div>

                    <!-- Delete Tag Button -->
                    <div class="p-2">
                        <div class="d-flex align-items-center p-1 gap-1">
                            <input id="delete-tag-button" class="delete-button" type="button" value="Delete Tag" />
                        </div>
                    </div>
                </div>

                <!-- Unselected tag text -->
                <div id="edit-tag-menu-unselected" class="justify-content-center align-items-center p-2" style="display: none;">
                    <h1 class="text-white fw-bold"> No tag selected. </h1>
                </div>
            </div>
        </div>
    </div>

    <div id="graph" class="container-fluid h-100 justify-content-center align-items-center overflow-hidden rounded-2 p-0" style="max-height: calc(100vh - 57px - 1rem); top: calc(57px + 0.5rem)">
        <!-- Tag graph is created here -->
    </div>
</div>

<script>
    var selectedTag;
    var graph;
    var inEditMode = false;

    document.addEventListener('DOMContentLoaded', LoadNodeGraph);

    var ignoreDeselect = false;

    document.body.addEventListener('click', () => {
        if(ignoreDeselect){
            ignoreDeselect = false;
        }
        else{
            selectedTag = null;

            // Reset the edit mode text when deselecting (if already in edit mode)
            if(inEditMode){
                SetEditMode();
            }
        }
  
    });
    
    const createTagButton = document.getElementById('create-tag-button');
    const editTagButton = document.getElementById('edit-tag-button')
    const createTagMenu = document.getElementById('create-tag-menu');;
    const editTagMenu = document.getElementById('edit-tag-menu');

    const tagNameElement = document.getElementById('tag-name');
    const tagEditContainer = document.getElementById('edit-tag-menu-container');
    const tagEditUnselected = document.getElementById('edit-tag-menu-unselected');

    const parentContainer = document.getElementById('parent-tags-container');
    const childContainer = document.getElementById('child-tags-container');

    createTagButton.addEventListener('click', SetCreateMode);
    editTagButton.addEventListener('click', () => SetEditMode(selectedTag));

    document.getElementById('edit-tag-name').addEventListener('click', EditTagNamePrompt);
    document.getElementById('uploadForm').addEventListener('submit', async (event) => CreateTagPrompt(event));
    document.getElementById('delete-tag-button').addEventListener('click', DeleteTagPrompt);

    document.getElementById('add-parent-button').addEventListener('click', AddParentTagPrompt);
    document.getElementById('add-child-button').addEventListener('click', AddChildTagPrompt);

    async function LoadNodeGraph() {
        const graphContainer = document.getElementById('graph');

        const response = await fetch('/api/tags/manager-data');
        const tagData = await response.json();

        let width = graphContainer.clientWidth;
        let height = graphContainer.clientHeight

        graph = new ForceGraph(graphContainer)
            .graphData(tagData)
            .width(width)
            .height(height)
            .backgroundColor("#2b2b2b")
            .nodeCanvasObject((node, ctx, globalScale) => {
                  const label = node.name;
                  const fontSize = 12;
                  ctx.font = `${fontSize}px Sans-Serif`;
                  const textWidth = ctx.measureText(label).width;
                  const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize); // some padding

                  ctx.fillStyle = node.color;
                  ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);
                  //const roundRect = ctx.roundRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions, 20);
                  //ctx.fill(roundRect);

                  ctx.textAlign = 'center';
                  ctx.textBaseline = 'middle';
                  ctx.fillStyle = 'rgba(255, 255, 255, 1)';
                  ctx.fillText(node.name, node.x, node.y);

                  node.__bckgDimensions = bckgDimensions; // to re-use in nodePointerAreaPaint
            })
            .nodePointerAreaPaint((node, color, ctx) => {
                  ctx.fillStyle = color;
                  const bckgDimensions = node.__bckgDimensions;
                  bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);
            })
            .onNodeClick((node, event) => {
                selectedTag = node;
                SetEditMode(node);
            })
            .d3Force('link').distance(100);
    }
    async function CreateTagPrompt(formEvent) {
        formEvent?.preventDefault();

        const name = document.getElementById('name').value;
        const colourHex = document.getElementById('colourHex').value;

        try {
            const response = await fetch(`/api/tags`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify ({
                    name,
                    colourHex
                })
            });

            if (response.ok) {
                const newTag = await response.json();

                let { nodes, links } = graph.graphData();

                nodes.push({
                    id: newTag.id,
                    name: newTag.tagName,
                    color: newTag.colourHex
                });

                graph.graphData({ nodes, links });
            }
            else {
                console.log(response.status);
                console.log(response.headers);
                console.log(await response.json());
                alert(`Tag creation failed. Please try again.`);
            }
        }

        catch (error) {
            console.error('Error:', error);
            alert('An error occurred while adding the tag. Please try again.');
        }
    }
    async function EditTagNamePrompt() {
        const newName = prompt("New tag name:", tagNameElement.innerHTML);

        if(newName == null) return;

        try {
            const response = await fetch(`/api/tags/${selectedTag.id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json-patch+json'
                },
                body: JSON.stringify(
                    [
                        {
                            "op": "replace",
                            "path": "/tagName",
                            "value": `${newName}`
                        }
                    ]
                )
            });

            if (response.ok) {
                const updatedTag = await response.json();

                // Update name in edit panel
                tagNameElement.innerText = updatedTag.tagName;

                // Update name in graph
                const nodeToUpdate = graph.graphData().nodes.find(node => node.id === updatedTag.id);
                nodeToUpdate.name = updatedTag.tagName;

                // Update canvas object without redrawing entire graph
                graph.pauseAnimation();
                graph.resumeAnimation();
            }
            else {
                console.log(await response.json());
                console.log(response.status);
                alert(`Name change failed.`);
            }
        }

        catch (error) {
            console.error('Error:', error);
            alert('An error occurred while changing image name. Please try again.');
        }
    }
    async function DeleteTagPrompt() {
        let confirmText = "Are you sure you want to delete this tag?\nAll relations involving this tag will also be deleted.\nThis cannot be undone.";

        if (confirm(confirmText) == false) return;

        try {
            const response = await fetch(`/api/tags/${selectedTag.id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
            });

            if (response.ok) {
                const newTag = await response.json();

                let { nodes, links } = graph.graphData();

                nodes = nodes.filter((node) => node.name != newTag.tagName);

                graph.graphData({ nodes, links });

                selectedTag = null;
                SetEditMode();
            }
            else {
                console.log(response);
                console.log(response.status);
                alert('Delete failed. Please try again.');
            }
        }

        catch (error) {
            console.error('Error:', error);
            alert('An error occurred while deleting the tag. Please try again.');
        }
    }
    async function SetCreateMode() {
        inEditMode = false;

        createTagButton.style.backgroundColor = "rgb(110, 110, 110)";
        editTagButton.style.backgroundColor = "var(--bg-colour-main)";

        createTagMenu.style.display = "inherit";
        editTagMenu.style.display = "none";
    }
    async function SetEditMode(tag) {
        inEditMode = true;

        editTagButton.style.backgroundColor = "rgb(110, 110, 110)";
        createTagButton.style.backgroundColor = "var(--bg-colour-main)";

        editTagMenu.style.display = "inherit";
        createTagMenu.style.display = "none";

        if(tag) {
            tagNameElement.innerHTML = tag.name;

            ClearParentTags();
            ClearChildTags();
            LoadParentTags();
            LoadChildTags();

            tagEditUnselected.style.display = "none";
            tagEditContainer.style.display = "inherit";
        }

        else {
            tagEditContainer.style.display = "none";
            tagEditUnselected.style.display = "flex";
        }
    }
    async function ClearParentTags() {
        let parentTags = parentContainer.getElementsByClassName('tag');
        while (parentTags.length > 0) {
            parentTags[0].parentNode.removeChild(parentTags[0]);
        }
    }
    async function ClearChildTags() {
        let childTags = childContainer.getElementsByClassName('tag');
        while (childTags.length > 0) {
            childTags[0].parentNode.removeChild(childTags[0]);
        }    
    }
    async function LoadParentTags () {
        const response = await fetch(`/api/tags/${selectedTag.id}/parents`)

        if(response.status == 200) {
            const parents = await response.json();

            console.log(parents);
            parents.forEach((parent) => {
                DisplayTag(parent, parentContainer);
            });
        }

        else if(response.status == 204){
            //console.log(`The tag ${selectedTag.name} has no parents (tag id: ${selectedTag.id})`)
        }

        else{
            return console.error(`Could not load parents for the tag ${selectedTag.name} (tag id: ${selectedTag.id})`);
        }
    }
    async function LoadChildTags () {
        const response = await fetch(`/api/tags/${selectedTag.id}/children`)

        if(response.status == 200) {
            const children = await response.json();

            console.log(children);

            children.forEach((child) => {
                DisplayTag(child, childContainer);
            });
        }

        else if(response.status == 204){
            //console.log(`The tag ${selectedTag.name} has no children (tag id: ${selectedTag.id})`)
        }

        else{
            return console.error(`Could not load children for the tag ${selectedTag.name} (tag id: ${selectedTag.id})`);
        }
    }
    async function DisplayTag(tag, tagContainer) {
        const newTag = document.createElement('div');
        const tagText = document.createElement('h1');

        newTag.classList.add('tag', 'tag-container');
        newTag.style.backgroundColor = tag.colourHex;
        newTag.oncontextmenu = () => { return false };

        tagText.className = 'tag-text';
        tagText.textContent = tag.tagName;

        const addTagButton = tagContainer.querySelector('.add-tag-button');

        newTag.appendChild(tagText);
        tagContainer.insertBefore(newTag, addTagButton);

        newTag.addEventListener('click', (tag) => console.log("Tag clicked"));
        newTag.addEventListener('contextmenu', () => console.log("Tag right-clicked"));
    }
    async function AddParentTagPrompt() {
        const parentName = prompt("Enter the name of the tag to add as a parent.");
        if(parentName == undefined) return;

        const response = await fetch(`api/tags/find?name=${parentName}`);

        if(response.ok){
            const parentTag = await respon.json();
            await AddParentTag(selectedTag, parentTag);
        }
    }
    async function AddChildTagPrompt() {
        const childName = prompt('Enter the name of the tag to add as a child:');

        if(childName == null){
            return;
        }

        const response = await fetch(`/api/tags/find?name=${childName}`);

        if(response.ok){
            const childTag = await response.json();
            await AddChildTag(selectedTag.id, childTag.id);
        }

        else{
            alert(`Could not find the tag with the name ${childName}`);
            console.warn(response);
        }
    }
    async function AddChildTag(tagId, childTagId) {
        const response = await fetch(`/api/tags/${tagId}/children/${childTagId}`, {
            method: 'POST'
        });

        if(response.ok){
            let { nodes, links } = graph.graphData();

            links.push({
                source: tagId,
                target: childTagId,
            });

            graph.graphData({ nodes, links });
        }

        else {
            console.error("There was an error when adding a tag relation.");
        }
    }
</script>