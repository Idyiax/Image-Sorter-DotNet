<style>
    h1 {
        font-size: 16px;
        margin-bottom: 0;
    }

    #edit-image-name {
        width: 20px;
        height: 20px;
        border-radius: 10px;
        display: flex;
        background-color: var(--bg-colour-light);
        align-items: center;
        justify-content: center;
        transition: opacity 0.2s;
    }

        #edit-image-name:hover {
            opacity: 0.5;
            cursor: pointer;
        }

    #tags-container {
        min-height: 120px;
        display: flex;
        align-items: flex-start;
    }

    .tag-container {
        padding: 4px 8px 4px 8px;
        border-radius: 16px;
        white-space: nowrap;
        height: fit-content;
        margin-bottom: 4px;
        transition: filter 0.1s;
    }
        .tag-container:hover {
            filter: brightness(125%);
            cursor: pointer;
        }

    .tag-text {
        color: white;
        font-weight: bold;
        line-height: 1;
        user-select: none;
        margin: 0px;
    }
</style>

<div class="container w-100 h-100 mw-100 mh-100 p-0 d-inline-block">
    <div class="h-100 bg-colour-dark rounded-2" style="width: 20%">
        <!-- Image Renaming -->
        <div class="d-flex align-items-center p-1 gap-1">
            <h1 id="image-name" class="text-white fw-bold"> <!-- Image Name Inserted Here--> </h1>
            <div id="edit-image-name">
                <svg width="16px" height="16px" style="fill: white;">
                    <path d="M9.97401 3.19292C10.3645 2.80239 10.9977 2.80239 11.3882 3.19292L12.8024 4.60713C13.193 4.99766 13.193 5.63082 12.8024 6.02134L11.7418 7.082L8.91335 4.25358L9.97401 3.19292Z"></path>
                    <path d="M8.20624 4.96068L3.61005 9.55688L3.05003 12.357C2.98005 12.7068 3.28851 13.0153 3.63838 12.9453L6.43847 12.3853L11.0347 7.78911L8.20624 4.96068Z"></path>
                </svg>
            </div> 
        </div>
        <!-- Image Deleting -->
        <div class="d-flex align-items-center p-1 gap-1">
            <input id="delete-image-button" type="button" value="Delete Image"/>
        </div>
        <!-- Tag Managing -->
        <div class="p-2">
            <div class="container-fluid pb-2 overflow-hidden">
                <h1 class="text-white fw-bold"> Tags </h1>
            </div>
            <div id="tags-container" class="container-fluid rounded bg-colour-darker p-2 gap-1">
                <div class="tag-container" style="background-color: aquamarine">
                    <h1 class="tag-text"> Test </h1>
                </div>
                <div class="tag-container" style="background-color: coral">
                    <h1 class="tag-text"> Second Test </h1>
                </div>
            </div>
        </div>
    </div>

    <div class="h-100 w-100 d-flex justify-content-center align-items-center position-absolute z-n1" style="max-height: calc(100vh - 57px - 1rem); top: calc(57px + 0.5rem)">
        <img id="main-image" class="object-fit-contain mh-100" src="" style="max-width: 50%"/>
    </div>
</div>

<script>
    // Get the ID from the URL
    let urlParams = new URLSearchParams(window.location.search);
    const id = parseInt(urlParams.get('id') || urlParams.get('id') || '0');

    const imageElement = document.getElementById('main-image');
    const imageName = document.getElementById('image-name');
    const tagsContainer = document.getElementById('tags-container');

    let tags = [];

    // DOM loaded
    document.addEventListener('DOMContentLoaded', async () => {
        DisplayImage();
        LoadTags();
    });

    document.getElementById('edit-image-name').addEventListener('click', EditImageName);
    document.getElementById('delete-image-button').addEventListener('click', DeleteImage);

    async function DisplayImage() {
        try {
            const response = await fetch(`/api/images/${id}`);
            const image = await response.json();

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            // Update the page with the image data

            imageElement.src = image.filePathName;
            imageElement.alt = image.fileName;

            imageName.innerText = image.fileName;
        }

        catch (error) {
            console.error('Error fetching image:', error);
        }
    }
    async function EditImageName() {
        const newName = prompt("New image name:", imageName.innerText);

        if(newName == null) return;

        try {
            const response = await fetch(`/api/images/${id}/`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json-patch+json'
                },
                body: JSON.stringify(
                    [
                        {
                            "op": "replace",
                            "path": "/fileName",
                            "value": newName
                        }
                    ]
                )
            });

            if (response.ok) {
                imageName.innerText = newName;
            }
            else {
                const errorData = await response.json();
                alert(`Name change failed. ${errorData.errors.id[0] || 'Please try again.'}`);
            }
        }

        catch (error) {
            console.error('Error:', error);
            alert('An error occurred while changing image name. Please try again.');
        }
    }
    async function DeleteImage() {
        let confirmText = "Are you sure you want to delete this image? \nThis cannot be undone.";

        if (confirm(confirmText) == false) return;

        try {
            const response = await fetch(`/api/images/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
            });

            if (response.ok) {
                window.location.href = "/Home/LibraryView";
            }
            else {
                alert('Delete failed. Please try again.');
            }
        }

        catch (error) {
            console.error('Error:', error);
            alert('An error occurred while deleting the image. Please try again.');
        }
    }
    async function LoadTags() {
        try {
            const response = await fetch(`/api/images/${id}/tags`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            if(response.status != 204){
                tags = await response.json();
                await tags.forEach(tag => DisplayTag(tag));
            }
            
            await CreateAddTagButton();
        }

        catch (error) {
            console.error('Error fetching tags:', error);
        }
    }
    async function DisplayTag(tag) {
        const newTag = document.createElement('div');
        const tagText = document.createElement('h1');

        newTag.className = 'tag-container';
        newTag.style.backgroundColor = tag.colourHex;

        tagText.className = 'tag-text';
        tagText.textContent = tag.tagName;

        newTag.appendChild(tagText);
        tagsContainer.appendChild(newTag);
    }
    async function CreateAddTagButton() {
        const newTag = document.createElement('div');
        const tagText = document.createElement('h1');

        newTag.classList = 'tag-container bg-colour-light';

        tagText.className = 'tag-text';
        tagText.textContent = '+';

        newTag.appendChild(tagText);
        tagsContainer.appendChild(newTag);

        newTag.addEventListener('click', () => AddTagMenu(true));
    }
    async function AddTagMenu(isVisible) {
        console.log("OwO");
    }
    async function AddTag() {

    }
</script>