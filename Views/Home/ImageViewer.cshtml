<style>
    #edit-image-name {
        min-width: 20px;
        min-height: 20px;
        border-radius: 10px;
        display: flex;
        background-color: var(--bg-colour-light);
        align-items: center;
        justify-content: center;
        transition: opacity 0.2s;
    }

        #edit-image-name:hover {
            opacity: 0.5;
            cursor: pointer;
        } 
</style>

<!-- Info Panel -->
<div class="side-panel">

    <!-- Image Renaming -->
    <div class="panel-container d-flex" style="align-items: last baseline">
        <h1 id="image-name" class="panel-title-text"> <!-- Image Name Inserted Here--> </h1>
        <div id="edit-image-name">
            <svg width="16px" height="16px" style="fill: white;">
                <path d="M9.97401 3.19292C10.3645 2.80239 10.9977 2.80239 11.3882 3.19292L12.8024 4.60713C13.193 4.99766 13.193 5.63082 12.8024 6.02134L11.7418 7.082L8.91335 4.25358L9.97401 3.19292Z"></path>
                <path d="M8.20624 4.96068L3.61005 9.55688L3.05003 12.357C2.98005 12.7068 3.28851 13.0153 3.63838 12.9453L6.43847 12.3853L11.0347 7.78911L8.20624 4.96068Z"></path>
            </svg>
        </div>
    </div>

    <!-- Tag Management -->
    <div class="panel-container">
        <div class="container-fluid p-2 pt-0 overflow-hidden">
            <h1> Tags </h1>
        </div>
        <div id="tags-container" class="tags-container container-fluid rounded bg-colour-darker p-2 gap-1">
            <div id="add-tag-button" class="tag-container bg-colour-light">
                <h1 class="tag-text">+</h1>
            </div>
        </div>
    </div>

    <!-- Image Deleting -->
    <div class="panel-container d-flex">
        <input class="delete-button" type="button" value="Delete Image" onclick="DeleteImage()"/>
    </div>
</div>

<div class="h-100 w-100 d-flex justify-content-center align-items-center position-absolute z-n1" style="max-height: calc(100vh - 57px - 1rem); top: calc(57px + 0.5rem)">
    <img id="main-image" class="object-fit-contain mh-100" src="" style="max-width: 50%" />
</div>

<script>
    // Get the ID from the URL
    let urlParams = new URLSearchParams(window.location.search);
    const id = parseInt(urlParams.get('id') || urlParams.get('id') || '0');

    const imageElement = document.getElementById('main-image');
    const imageName = document.getElementById('image-name');
    const tagsContainer = document.getElementById('tags-container');
    const addTagButton = document.getElementById('add-tag-button');

    let tags = [];

    // DOM loaded
    document.addEventListener('DOMContentLoaded', async () => {
        DisplayImage();
        LoadTags();
    });

    document.getElementById('edit-image-name').addEventListener('click', EditImageName);
    addTagButton.addEventListener('click', AddTag);

    async function DisplayImage() {
        try {
            const response = await fetch(`/api/images/${id}`);
            const image = await response.json();

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            // Update the page with the image data

            imageElement.src = image.filePathName;
            imageElement.alt = image.fileName;

            imageName.innerText = image.fileName;
        }

        catch (error) {
            console.error('Error fetching image:', error);
        }
    }
    async function EditImageName() {
        const newName = prompt("New image name:", imageName.innerText);

        if(newName == null) return;

        try {
            const response = await fetch(`/api/images/${id}/`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json-patch+json'
                },
                body: JSON.stringify(
                    [
                        {
                            "op": "replace",
                            "path": "/fileName",
                            "value": newName
                        }
                    ]
                )
            });

            if (response.ok) {
                imageName.innerText = newName;
            }
            else {
                const errorData = await response.json();
                alert(`Name change failed. ${errorData.errors.id[0] || 'Please try again.'}`);
            }
        }

        catch (error) {
            console.error('Error:', error);
            alert('An error occurred while changing image name. Please try again.');
        }
    }
    async function DeleteImage() {
        let confirmText = "Are you sure you want to delete this image? \nThis cannot be undone.";

        if (confirm(confirmText) == false) return;

        try {
            const response = await fetch(`/api/images/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
            });

            if (response.ok) {
                window.location.href = "/Home/LibraryView";
            }
            else {
                alert('Delete failed. Please try again.');
                console.log(response);
            }
        }

        catch (error) {
            console.error('Error:', error);
            alert('An error occurred while deleting the image. Please try again.');
        }
    }
    async function LoadTags() {
        try {
            const response = await fetch(`/api/images/${id}/tags`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            if(response.status != 204){
                tags = await response.json();
                await tags.forEach(tag => DisplayTag(tag));
            }
        }

        catch (error) {
            console.error('Error fetching tags:', error);
        }
    }
    async function DisplayTag(tag) {
        const newTag = document.createElement('div');
        const tagText = document.createElement('h1');

        newTag.className = 'tag-container';
        newTag.style.backgroundColor = tag.colourHex;
        newTag.oncontextmenu = () => { return false };

        tagText.className = 'tag-text';
        tagText.textContent = tag.tagName;

        newTag.appendChild(tagText);
        tagsContainer.insertBefore(newTag, addTagButton);

        newTag.addEventListener('click', (tag) => FilterByTag(tag));
        newTag.addEventListener('contextmenu', () => RemoveTag(tag, newTag));
    }
    async function AddTag() {
        const name = prompt('Add tag with the following name:');

        if(name == null){
            return;
        }

        const findResponse = await fetch(`/api/tags/find?name=${name}`);

        var tag;

        // If tag can't be found, prompt to create it and then add it.
        if(findResponse.status == 404) {
            const createNewTag = confirm(`The tag "${name}" does not currently exist.\nWould you like to create it?`)

            if(createNewTag) {
                tag = await CreateTag(name)
                console.log(tag);
            }

            else {
                return;
            }
        }

        if (!findResponse.ok) {
                return;
        }

        tag = await findResponse.json();

        const tagIndex = tags.findIndex((t) => t.tagName == tag.tagName);

        if (tagIndex > -1) {
            alert("This image already has this tag.");
            return;
        }

        // Add the new tag
        const addResponse = await fetch(`/api/images/${id}/tags/${tag.id}`, {
            method: 'POST'
        });

        if(!addResponse.ok) {
            return;
        }

        // Add new tag visually
        const addedConnection = await addResponse.json();

        const tagResponse = await fetch(`/api/tags/${addedConnection.tagId}`)

        if(!tagResponse.ok) {
            return;
        }

        const newTag = await tagResponse.json();

        tags.push(newTag);
        DisplayTag(newTag);
    }
    async function CreateTag(name) {
        const colourHex = "#ff7f50";

        const response = await fetch(`/api/tags`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify ({
                name,
                colourHex
            })
        });

        if(!response.ok){
            console.log(response);
            return;
        }

        const tag = await response.json()

        return tag;
    }

    async function RemoveTag(tag, tagVisuals) {
        const response = await fetch(`/api/images/${id}/tags/${tag.id}`, {
            method: 'DELETE'
        });

        if (response.ok) {
            tagVisuals.remove();
            const tagIndex = tags.indexOf(tag);
            if (tagIndex > -1) {
                tags.splice(tagIndex, 1);
            }
        }

        else if (response.status == 404) {
            console.log("Tag not to delete not found.");
        }
        
        else {
            console.error(`Tried deleting the tag ${tag} from the image with id ${id} but failed with error code ${response.status}.`);
            console.log(response);
        }
    }
</script>